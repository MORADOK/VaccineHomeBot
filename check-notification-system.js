/**
 * Notification System Check Script
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fljyjbrgfzervxofrilo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZsanlqYnJnZnplcnZ4b2ZyaWxvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxMDE1MDUsImV4cCI6MjA2OTY3NzUwNX0.2_rGfy-3UA4cPnRsg8Lm8uvj9KBCOoz5IhwCbSWYIq4';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üì± VCHome Hospital - Notification System Check\n');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

const results = {
  database: {},
  functions: {},
  appointments: {},
  overall: 'unknown'
};

// 1. Check Database Tables
async function checkDatabaseTables() {
  console.log('üìä 1. Database Tables Check\n');

  const tables = [
    { name: 'appointments', description: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢' },
    { name: 'appointment_notifications', description: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' },
    { name: 'notification_jobs', description: '‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' }
  ];

  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table.name)
        .select('*')
        .limit(1);

      if (error) {
        if (error.message.includes('does not exist')) {
          console.log(`   ‚ùå ${table.name}: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
          results.database[table.name] = 'missing';
        } else if (error.message.includes('permission denied')) {
          console.log(`   ‚ö†Ô∏è  ${table.name}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á (${table.description})`);
          results.database[table.name] = 'permission_denied';
        } else {
          console.log(`   ‚ö†Ô∏è  ${table.name}: ${error.message}`);
          results.database[table.name] = 'error';
        }
      } else {
        console.log(`   ‚úÖ ${table.name}: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${table.description})`);
        results.database[table.name] = 'ok';
      }
    } catch (err) {
      console.log(`   ‚ùå ${table.name}: ${err.message}`);
      results.database[table.name] = 'error';
    }
  }
  console.log('');
}

// 2. Check Appointments
async function checkAppointments() {
  console.log('üìÖ 2. Appointments Check\n');

  try {
    // Check tomorrow's appointments
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];

    const { data: tomorrowAppts, error: tomorrowError } = await supabase
      .from('appointments')
      .select('*')
      .eq('appointment_date', tomorrowStr)
      .eq('status', 'scheduled');

    if (tomorrowError) {
      console.log(`   ‚ö†Ô∏è  ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: ${tomorrowError.message}`);
      results.appointments.tomorrow = 'error';
    } else {
      const count = tomorrowAppts?.length || 0;
      console.log(`   ${count > 0 ? '‚úÖ' : '‚ÑπÔ∏è '} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      results.appointments.tomorrow = { count, data: tomorrowAppts };
    }

    // Check overdue appointments
    const today = new Date().toISOString().split('T')[0];
    const { data: overdueAppts, error: overdueError } = await supabase
      .from('appointments')
      .select('*')
      .lt('appointment_date', today)
      .eq('status', 'scheduled');

    if (overdueError) {
      console.log(`   ‚ö†Ô∏è  ‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${overdueError.message}`);
      results.appointments.overdue = 'error';
    } else {
      const count = overdueAppts?.length || 0;
      console.log(`   ${count > 0 ? '‚ö†Ô∏è ' : '‚úÖ'} ‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      results.appointments.overdue = { count, data: overdueAppts };

      if (count > 0) {
        console.log(`      üí° ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`);
      }
    }

    // Check recent appointments
    const { data: recentAppts, error: recentError } = await supabase
      .from('appointments')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (recentError) {
      console.log(`   ‚ö†Ô∏è  ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${recentError.message}`);
      results.appointments.recent = 'error';
    } else {
      const count = recentAppts?.length || 0;
      console.log(`   ‚ÑπÔ∏è  ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      results.appointments.recent = { count };
    }

  } catch (err) {
    console.log(`   ‚ùå Error checking appointments: ${err.message}`);
  }
  console.log('');
}

// 3. Check Notification History
async function checkNotificationHistory() {
  console.log('üì¨ 3. Notification History\n');

  try {
    const { data: notifications, error } = await supabase
      .from('appointment_notifications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`);
      results.notifications = 'error';
      return;
    }

    const total = notifications?.length || 0;
    console.log(`   üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î): ${total}`);

    if (total === 0) {
      console.log(`   ‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`);
      console.log(`   üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node test-notification.js`);
      results.notifications = 'empty';
      return;
    }

    // ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const sent = notifications.filter(n => n.status === 'sent').length;
    const failed = notifications.filter(n => n.status === 'failed').length;
    const pending = notifications.filter(n => n.status === 'pending').length;

    console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${sent} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    if (failed > 0) {
      console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    }
    if (pending > 0) {
      console.log(`   ‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${pending} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    }

    // ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const reminder = notifications.filter(n => n.notification_type === 'reminder').length;
    const overdue = notifications.filter(n => n.notification_type === 'overdue').length;

    console.log(`   üìù ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:`);
    console.log(`      - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: ${reminder} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`      - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${overdue} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log(`\n   üìã ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:`);
    notifications.slice(0, 3).forEach((notif, i) => {
      const date = new Date(notif.created_at).toLocaleString('th-TH');
      const statusIcon = notif.status === 'sent' ? '‚úÖ' : notif.status === 'failed' ? '‚ùå' : '‚è≥';
      console.log(`      ${i+1}. ${statusIcon} ${notif.notification_type} ‚Üí ${notif.sent_to}`);
      console.log(`         ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${date}`);
    });

    results.notifications = { total, sent, failed, pending, reminder, overdue };

  } catch (err) {
    console.log(`   ‚ùå Error: ${err.message}`);
    results.notifications = 'error';
  }
  console.log('');
}

// 4. Check Supabase Functions
async function checkSupabaseFunctions() {
  console.log('‚öôÔ∏è  4. Supabase Edge Functions\n');

  try {
    // Test manual-notification-trigger function
    console.log('   üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô manual-notification-trigger...');

    const { data, error } = await supabase.functions.invoke('manual-notification-trigger', {
      body: { test: true, dryRun: true }
    });

    if (error) {
      if (error.message.includes('FunctionsRelayError') || error.message.includes('Not Found')) {
        console.log(`   ‚ùå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏ö: manual-notification-trigger`);
        console.log(`      üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ deploy ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
        results.functions.notification = 'not_found';
      } else {
        console.log(`   ‚ö†Ô∏è  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${error.message}`);
        results.functions.notification = 'error';
      }
    } else {
      console.log(`   ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô manual-notification-trigger ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`);
      if (data) {
        console.log(`      üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`, JSON.stringify(data, null, 2).split('\n').map((line, i) => i === 0 ? line : `      ${line}`).join('\n'));
      }
      results.functions.notification = 'ok';
    }

  } catch (err) {
    console.log(`   ‚ùå Error: ${err.message}`);
    results.functions.notification = 'error';
  }
  console.log('');
}

// 5. Check LINE Integration
async function checkLineIntegration() {
  console.log('üì± 5. LINE Bot Integration\n');

  try {
    // Check webhook URL from .env
    const webhookUrl = process.env.VITE_WEBHOOK_URL;

    if (webhookUrl) {
      console.log(`   ‚ÑπÔ∏è  Webhook URL: ${webhookUrl}`);
      results.line = { configured: true, url: webhookUrl };
    } else {
      console.log(`   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö VITE_WEBHOOK_URL ‡πÉ‡∏ô .env`);
      results.line = { configured: false };
    }

    // Note: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE API ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å client-side
    console.log(`   üí° ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE API ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ú‡πà‡∏≤‡∏ô Edge Function`);

  } catch (err) {
    console.log(`   ‚ö†Ô∏è  Error: ${err.message}`);
  }
  console.log('');
}

// 6. Generate Summary
function generateSummary() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log('üìä SUMMARY - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n');

  // Database Status
  const dbOk = Object.values(results.database).filter(v => v === 'ok').length;
  const dbTotal = Object.keys(results.database).length;
  console.log(`üìä Database: ${dbOk}/${dbTotal} tables OK`);

  // Appointments
  if (results.appointments.tomorrow && typeof results.appointments.tomorrow === 'object') {
    const count = results.appointments.tomorrow.count;
    console.log(`üìÖ Appointments: ${count} ‡∏ô‡∏±‡∏î‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ`);
  }
  if (results.appointments.overdue && typeof results.appointments.overdue === 'object') {
    const count = results.appointments.overdue.count;
    if (count > 0) {
      console.log(`‚ö†Ô∏è  Overdue: ${count} ‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î`);
    }
  }

  // Notifications
  if (results.notifications && typeof results.notifications === 'object') {
    console.log(`üì¨ Notifications: ${results.notifications.sent}/${results.notifications.total} sent`);
  } else if (results.notifications === 'empty') {
    console.log(`üì¨ Notifications: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`);
  }

  // Functions
  if (results.functions.notification === 'ok') {
    console.log(`‚öôÔ∏è  Functions: ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`);
  } else if (results.functions.notification === 'not_found') {
    console.log(`‚öôÔ∏è  Functions: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô`);
  }

  console.log('');

  // Overall Status
  const criticalIssues =
    (results.database.appointments === 'missing' ? 1 : 0) +
    (results.database.appointment_notifications === 'missing' ? 1 : 0) +
    (results.functions.notification === 'not_found' ? 1 : 0);

  console.log('üéØ Overall Status:\n');

  if (criticalIssues > 0) {
    console.log('   üî¥ CRITICAL: ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    console.log(`   Missing: ${criticalIssues} components\n`);
    results.overall = 'critical';
  } else if (results.functions.notification === 'error') {
    console.log('   üü° WARNING: ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô');
    console.log('   Edge Function ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n');
    results.overall = 'warning';
  } else if (results.notifications === 'empty') {
    console.log('   üü¢ READY: ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    console.log('   ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n');
    results.overall = 'ready_unused';
  } else if (results.notifications && typeof results.notifications === 'object' && results.notifications.sent > 0) {
    console.log('   üü¢ EXCELLENT: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!');
    console.log(`   ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ${results.notifications.sent} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß\n`);
    results.overall = 'excellent';
  } else {
    console.log('   üü¢ GOOD: ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n');
    results.overall = 'good';
  }

  // Next Steps
  console.log('üìã Next Steps:\n');

  if (results.overall === 'critical') {
    if (results.functions.notification === 'not_found') {
      console.log('   1. üö® Deploy Edge Function:');
      console.log('      $ cd supabase/functions');
      console.log('      $ supabase functions deploy manual-notification-trigger');
    }
    if (results.database.appointments === 'missing') {
      console.log('   2. üìä Run migrations to create tables');
    }
  } else if (results.overall === 'ready_unused') {
    console.log('   1. üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:');
    console.log('      - ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Staff Portal');
    console.log('      - ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"');
    console.log('      - ‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"');
    console.log('');
    console.log('   2. ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('      - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ');
    console.log('      - ‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
  } else if (results.overall === 'excellent') {
    console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!');
    console.log('   üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Staff Portal ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

// Main
async function main() {
  try {
    await checkDatabaseTables();
    await checkAppointments();
    await checkNotificationHistory();
    await checkSupabaseFunctions();
    await checkLineIntegration();
    generateSummary();
  } catch (error) {
    console.error('‚ùå Fatal error:', error);
  }
}

main();
