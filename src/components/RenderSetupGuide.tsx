import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Copy, CheckCircle, Server, Shield, Settings, Code2, Database, Key, Download } from 'lucide-react';
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

const RenderSetupGuide = () => {
  const [copiedItem, setCopiedItem] = useState<string | null>(null);
  const { toast } = useToast();

  const copyToClipboard = async (text: string, itemName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(itemName);
      toast({
        title: "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!",
        description: `‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ${itemName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
      });
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (err) {
      toast({
        title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    }
  };

  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß!",
      description: `‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ${filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
    });
  };

  const dockerFile = `# Dockerfile ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö n8n ‡∏ö‡∏ô Render
FROM n8nio/n8n:latest

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
USER root

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
RUN apk add --no-cache \\
    tzdata \\
    curl \\
    bash

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
ENV TZ=Asia/Bangkok
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ user node
USER node

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ working directory
WORKDIR /home/node

# ‡∏™‡∏£‡πâ‡∏≤‡∏á .n8n directory
RUN mkdir -p /home/node/.n8n

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\
  CMD curl -f http://localhost:5678/healthz || exit 1

# ‡πÄ‡∏õ‡∏¥‡∏î port
EXPOSE 5678

# Start command
CMD ["n8n", "start"]`;

  const renderYaml = `# render.yaml - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Render Service
services:
  - type: web
    name: n8n-vaccine-workflow
    env: docker
    dockerfilePath: ./Dockerfile
    plan: starter # ‡∏´‡∏£‡∏∑‡∏≠ standard, pro ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    region: singapore # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å region ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    branch: main
    buildCommand: ""
    startCommand: "n8n start"
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables
    envVars:
      - key: NODE_ENV
        value: production
      
      - key: N8N_HOST
        value: 0.0.0.0
      
      - key: N8N_PORT
        value: 5678
      
      - key: N8N_PROTOCOL
        value: https
      
      - key: N8N_EDITOR_BASE_URL
        fromService:
          type: web
          name: n8n-vaccine-workflow
          property: host
      
      - key: WEBHOOK_URL
        fromService:
          type: web
          name: n8n-vaccine-workflow
          property: host
      
      - key: N8N_ENCRYPTION_KEY
        generateValue: true # Render ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ
      
      - key: DB_TYPE
        value: postgresdb
      
      - key: DB_POSTGRESDB_HOST
        fromDatabase:
          name: n8n-postgres
          property: host
      
      - key: DB_POSTGRESDB_PORT
        fromDatabase:
          name: n8n-postgres
          property: port
      
      - key: DB_POSTGRESDB_DATABASE
        fromDatabase:
          name: n8n-postgres
          property: database
      
      - key: DB_POSTGRESDB_USER
        fromDatabase:
          name: n8n-postgres
          property: user
      
      - key: DB_POSTGRESDB_PASSWORD
        fromDatabase:
          name: n8n-postgres
          property: password
      
      # LINE Bot Credentials (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Render Dashboard)
      - key: LINE_CHANNEL_ACCESS_TOKEN
        sync: false # ‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô Dashboard
      
      - key: LINE_CHANNEL_SECRET
        sync: false
      
      # Google API Credentials
      - key: GOOGLE_ACCESS_TOKEN
        sync: false
      
      - key: GOOGLE_REFRESH_TOKEN
        sync: false
      
      - key: GOOGLE_CLIENT_ID
        sync: false
      
      - key: GOOGLE_CLIENT_SECRET
        sync: false
      
      - key: GOOGLE_SPREADSHEET_ID
        sync: false
      
      # OpenAI API Key (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Router)
      - key: OPENAI_API_KEY
        sync: false

databases:
  - name: n8n-postgres
    databaseName: n8n_db
    user: n8n_user
    plan: starter # ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    region: singapore`;

  const envExample = `# .env.example - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables

# ===========================================
# üîß N8N Core Configuration
# ===========================================
NODE_ENV=production
N8N_HOST=0.0.0.0
N8N_PORT=5678
N8N_PROTOCOL=https
N8N_EDITOR_BASE_URL=https://your-app-name.onrender.com
WEBHOOK_URL=https://your-app-name.onrender.com
N8N_ENCRYPTION_KEY=your-super-secret-encryption-key-32-chars

# ===========================================
# üóÑÔ∏è Database Configuration (PostgreSQL)
# ===========================================
DB_TYPE=postgresdb
DB_POSTGRESDB_HOST=your-postgres-host
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=n8n_db
DB_POSTGRESDB_USER=n8n_user
DB_POSTGRESDB_PASSWORD=your-secure-password

# ===========================================
# üì± LINE Bot Credentials
# ===========================================
LINE_CHANNEL_ACCESS_TOKEN=your-line-channel-access-token
LINE_CHANNEL_SECRET=your-line-channel-secret

# ===========================================
# üìä Google API Credentials
# ===========================================
GOOGLE_ACCESS_TOKEN=your-google-access-token
GOOGLE_REFRESH_TOKEN=your-google-refresh-token
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_SPREADSHEET_ID=your-google-spreadsheet-id

# ===========================================
# ü§ñ OpenAI API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Smart Router)
# ===========================================
OPENAI_API_KEY=sk-your-openai-api-key

# ===========================================
# üîí Security & Authentication
# ===========================================
N8N_USER_MANAGEMENT_DISABLED=true
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=your-secure-admin-password

# ===========================================
# üìß Email Configuration (Optional)
# ===========================================
N8N_EMAIL_MODE=smtp
N8N_SMTP_HOST=smtp.gmail.com
N8N_SMTP_PORT=587
N8N_SMTP_USER=your-email@gmail.com
N8N_SMTP_PASS=your-app-password
N8N_SMTP_SENDER=your-email@gmail.com`;

  const packageJson = `{
  "name": "n8n-vaccine-workflow",
  "version": "1.0.0",
  "description": "N8N Vaccine Workflow System on Render",
  "main": "index.js",
  "scripts": {
    "start": "n8n start",
    "dev": "n8n start --tunnel",
    "build": "echo 'Build completed'",
    "postinstall": "echo 'Dependencies installed'"
  },
  "engines": {
    "node": ">=18.10.0",
    "npm": ">=9.0.0"
  },
  "dependencies": {
    "n8n": "latest"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yourusername/n8n-vaccine-workflow.git"
  },
  "keywords": [
    "n8n",
    "workflow",
    "automation",
    "vaccine",
    "line-bot",
    "render",
    "healthcare"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yourusername/n8n-vaccine-workflow/issues"
  },
  "homepage": "https://github.com/yourusername/n8n-vaccine-workflow#readme"
}`;

  const setupSteps = [
    {
      step: 1,
      title: "‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡πÉ‡∏ô GitHub",
      description: "‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
      details: [
        "‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub repository ‡πÉ‡∏´‡∏°‡πà",
        "‡πÄ‡∏û‡∏¥‡πà‡∏° Dockerfile, render.yaml, package.json",
        "Commit ‡πÅ‡∏•‡∏∞ push ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
      ]
    },
    {
      step: 2,
      title: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Render Service",
      description: "‡∏™‡∏£‡πâ‡∏≤‡∏á Web Service ‡πÉ‡∏ô Render",
      details: [
        "‡πÄ‡∏Ç‡πâ‡∏≤ Render Dashboard ‚Üí New ‚Üí Web Service",
        "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub repository",
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Docker environment",
        "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ service (‡πÄ‡∏ä‡πà‡∏ô n8n-vaccine-workflow)"
      ]
    },
    {
      step: 3,
      title: "‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL Database",
      description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö n8n",
      details: [
        "‡πÉ‡∏ô Render Dashboard ‚Üí New ‚Üí PostgreSQL",
        "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ database: n8n-postgres",
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å plan ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (Starter ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)",
        "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å connection details"
      ]
    },
    {
      step: 4,
      title: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables",
      description: "‡πÄ‡∏û‡∏¥‡πà‡∏° environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
      details: [
        "‡πÉ‡∏ô Web Service Settings ‚Üí Environment",
        "‡πÄ‡∏û‡∏¥‡πà‡∏° variables ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á .env",
        "‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ sensitive data ‡πÉ‡∏ô public repo",
        "‡πÉ‡∏ä‡πâ Render's secret management"
      ]
    },
    {
      step: 5,
      title: "Deploy ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
      description: "Deploy service ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
      details: [
        "‡∏Å‡∏î Deploy ‡πÉ‡∏ô Render Dashboard",
        "‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ deployment ‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à",
        "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á n8n ‡∏ú‡πà‡∏≤‡∏ô URL ‡∏ó‡∏µ‡πà Render ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ",
        "‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook ‡πÅ‡∏•‡∏∞ LINE Bot integration"
      ]
    }
  ];

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-foreground mb-2">
          üöÄ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á N8N ‡∏ö‡∏ô Render
        </h1>
        <p className="text-muted-foreground">
          Setup N8N Vaccine Workflow ‡∏ö‡∏ô Render ‡∏û‡∏£‡πâ‡∏≠‡∏° Environment Variables ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        </p>
      </div>

      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°</TabsTrigger>
          <TabsTrigger value="files">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</TabsTrigger>
          <TabsTrigger value="steps">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</TabsTrigger>
          <TabsTrigger value="env">Environment Variables</TabsTrigger>
          <TabsTrigger value="security">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <Alert>
            <Download className="h-4 w-4" />
            <AlertDescription>
              <strong>üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå:</strong> ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Download ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 
              ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å Copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader className="text-center">
                <Server className="h-12 w-12 mx-auto text-blue-500 mb-2" />
                <CardTitle>Render Platform</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm">
                  <li>‚úÖ Free tier available</li>
                  <li>‚úÖ Auto-scaling</li>
                  <li>‚úÖ SSL certificates</li>
                  <li>‚úÖ PostgreSQL support</li>
                  <li>‚úÖ Environment variables</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="text-center">
                <Shield className="h-12 w-12 mx-auto text-green-500 mb-2" />
                <CardTitle>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm">
                  <li>üîí Environment variables</li>
                  <li>üîê Secret management</li>
                  <li>üõ°Ô∏è HTTPS encryption</li>
                  <li>üîë Authentication</li>
                  <li>üì± API key protection</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="text-center">
                <Database className="h-12 w-12 mx-auto text-purple-500 mb-2" />
                <CardTitle>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm">
                  <li>üíâ Vaccine workflow</li>
                  <li>üì± LINE Bot integration</li>
                  <li>üìä Google Sheets sync</li>
                  <li>üìÖ Calendar scheduling</li>
                  <li>ü§ñ AI smart routing</li>
                </ul>
              </CardContent>
            </Card>
          </div>

          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              <strong>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Render:</strong> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á $node.context().get() ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô n8n Cloud 
              ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Environment Variables ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            </AlertDescription>
          </Alert>
        </TabsContent>

        <TabsContent value="files" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Code2 className="h-5 w-5" />
                  Dockerfile
                </CardTitle>
                <CardDescription>‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build Docker image</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm">
                    <code>{dockerFile}</code>
                  </pre>
                  <div className="absolute top-2 right-2 flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => downloadFile(dockerFile, "Dockerfile")}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => copyToClipboard(dockerFile, "Dockerfile")}
                    >
                      {copiedItem === "Dockerfile" ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  render.yaml
                </CardTitle>
                <CardDescription>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Render service</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm max-h-96">
                    <code>{renderYaml}</code>
                  </pre>
                  <div className="absolute top-2 right-2 flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => downloadFile(renderYaml, "render.yaml")}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => copyToClipboard(renderYaml, "render.yaml")}
                    >
                      {copiedItem === "render.yaml" ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  package.json
                </CardTitle>
                <CardDescription>Node.js dependencies</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm">
                    <code>{packageJson}</code>
                  </pre>
                  <div className="absolute top-2 right-2 flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => downloadFile(packageJson, "package.json")}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => copyToClipboard(packageJson, "package.json")}
                    >
                      {copiedItem === "package.json" ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Key className="h-5 w-5" />
                  .env.example
                </CardTitle>
                <CardDescription>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Environment Variables</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm max-h-96">
                    <code>{envExample}</code>
                  </pre>
                  <div className="absolute top-2 right-2 flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => downloadFile(envExample, ".env.example")}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => copyToClipboard(envExample, ".env.example")}
                    >
                      {copiedItem === ".env.example" ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="steps" className="space-y-6">
          <div className="space-y-6">
            {setupSteps.map((step, index) => (
              <Card key={index}>
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <Badge variant="default" className="text-lg px-3 py-1">
                      {step.step}
                    </Badge>
                    <CardTitle>{step.title}</CardTitle>
                  </div>
                  <CardDescription>{step.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {step.details.map((detail, idx) => (
                      <li key={idx} className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                        {detail}
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>

          <Alert>
            <Shield className="h-4 w-4" />
            <AlertDescription>
              <strong>‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà API keys ‡∏´‡∏£‡∏∑‡∏≠ secrets ‡πÉ‡∏ô repository! 
              ‡πÉ‡∏ä‡πâ Environment Variables ‡πÉ‡∏ô Render Dashboard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            </AlertDescription>
          </Alert>
        </TabsContent>

        <TabsContent value="env" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-green-600">‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render Dashboard</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="p-3 bg-green-50 rounded-lg">
                  <p className="font-semibold">LINE_CHANNEL_ACCESS_TOKEN</p>
                  <p className="text-sm text-muted-foreground">Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot API</p>
                </div>
                <div className="p-3 bg-green-50 rounded-lg">
                  <p className="font-semibold">GOOGLE_ACCESS_TOKEN</p>
                  <p className="text-sm text-muted-foreground">Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets API</p>
                </div>
                <div className="p-3 bg-green-50 rounded-lg">
                  <p className="font-semibold">OPENAI_API_KEY</p>
                  <p className="text-sm text-muted-foreground">API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Smart Router</p>
                </div>
                <div className="p-3 bg-green-50 rounded-lg">
                  <p className="font-semibold">N8N_ENCRYPTION_KEY</p>
                  <p className="text-sm text-muted-foreground">Encryption key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö n8n</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-blue-600">‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡πÉ‡∏™‡πà‡πÉ‡∏ô render.yaml ‡πÑ‡∏î‡πâ</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="p-3 bg-blue-50 rounded-lg">
                  <p className="font-semibold">NODE_ENV</p>
                  <p className="text-sm text-muted-foreground">production</p>
                </div>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <p className="font-semibold">N8N_HOST</p>
                  <p className="text-sm text-muted-foreground">0.0.0.0</p>
                </div>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <p className="font-semibold">N8N_PORT</p>
                  <p className="text-sm text-muted-foreground">5678</p>
                </div>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <p className="font-semibold">DB_TYPE</p>
                  <p className="text-sm text-muted-foreground">postgresdb</p>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡πÉ‡∏ô Render</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-semibold">1. ‡πÄ‡∏Ç‡πâ‡∏≤ Render Dashboard</h4>
                <p className="text-sm text-muted-foreground ml-4">
                  ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Web Service ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‚Üí Settings ‚Üí Environment
                </p>
              </div>
              
              <Separator />
              
              <div className="space-y-3">
                <h4 className="font-semibold">2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Environment Variable</h4>
                <ul className="ml-4 space-y-2 text-sm text-muted-foreground">
                  <li>‚Ä¢ ‡∏Å‡∏î "Add Environment Variable"</li>
                  <li>‚Ä¢ ‡πÉ‡∏™‡πà Key (‡πÄ‡∏ä‡πà‡∏ô LINE_CHANNEL_ACCESS_TOKEN)</li>
                  <li>‚Ä¢ ‡πÉ‡∏™‡πà Value (API key ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE)</li>
                  <li>‚Ä¢ ‡∏Å‡∏î "Save Changes"</li>
                </ul>
              </div>
              
              <Separator />
              
              <div className="space-y-3">
                <h4 className="font-semibold">3. Deploy ‡πÉ‡∏´‡∏°‡πà</h4>
                <p className="text-sm text-muted-foreground ml-4">
                  Render ‡∏à‡∏∞ redeploy service ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Environment Variables
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="border-green-200">
              <CardHeader>
                <CardTitle className="text-green-600 flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  ‚úÖ ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-2">
                  <p className="font-medium">Environment Variables</p>
                  <p className="text-sm text-muted-foreground">
                    ‡πÉ‡∏ä‡πâ Render's Environment Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sensitive data
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">Secret Management</p>
                  <p className="text-sm text-muted-foreground">
                    Render ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ environment variables ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">HTTPS Only</p>
                  <p className="text-sm text-muted-foreground">
                    ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô HTTPS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">Database Encryption</p>
                  <p className="text-sm text-muted-foreground">
                    PostgreSQL ‡∏ö‡∏ô Render ‡∏°‡∏µ encryption at rest
                  </p>
                </div>
              </CardContent>
            </Card>

            <Card className="border-red-200">
              <CardHeader>
                <CardTitle className="text-red-600 flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  ‚ùå ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-2">
                  <p className="font-medium">API Keys ‡πÉ‡∏ô Code</p>
                  <p className="text-sm text-muted-foreground">
                    ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà API keys ‡∏•‡∏á‡πÉ‡∏ô source code
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">.env ‡πÉ‡∏ô Repository</p>
                  <p className="text-sm text-muted-foreground">
                    ‡∏≠‡∏¢‡πà‡∏≤ commit ‡πÑ‡∏ü‡∏•‡πå .env ‡∏Ç‡∏∂‡πâ‡∏ô git repository
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">Plain Text Passwords</p>
                  <p className="text-sm text-muted-foreground">
                    ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö password ‡πÅ‡∏ö‡∏ö plain text
                  </p>
                </div>
                
                <div className="space-y-2">
                  <p className="font-medium">Public Repositories</p>
                  <p className="text-sm text-muted-foreground">
                    ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà secrets ‡πÉ‡∏ô public GitHub repositories
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>üõ°Ô∏è Security Checklist</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <h4 className="font-semibold">Environment Variables</h4>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡πÉ‡∏ä‡πâ Render Environment Variables
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡πÑ‡∏°‡πà commit .env ‡πÑ‡∏ü‡∏•‡πå
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡πÉ‡∏ä‡πâ strong encryption keys
                    </li>
                  </ul>
                </div>
                
                <div className="space-y-3">
                  <h4 className="font-semibold">Access Control</h4>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Basic Authentication
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡πÉ‡∏ä‡πâ strong passwords
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      ‡∏à‡∏≥‡∏Å‡∏±‡∏î IP access (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
                    </li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RenderSetupGuide;