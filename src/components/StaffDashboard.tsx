import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { 
  Users, 
  Syringe, 
  Calendar, 
  Bell, 
  Search,
  Plus,
  Edit,
  Send,
  CheckCircle,
  Clock,
  UserCheck,
  FileText
} from 'lucide-react';

interface Patient {
  id: string;
  lineUserId: string;
  displayName: string;
  firstName: string;
  lastName: string;
  phone?: string;
  email?: string;
  registeredAt: string;
  status: 'pending' | 'completed' | 'cancelled';
}

interface VaccineType {
  id: string;
  name: string;
  doses: number;
  interval: number;
  description: string;
  available: boolean;
}

interface Appointment {
  id: string;
  patientId: string;
  patientName: string;
  vaccineId: string;
  vaccineName: string;
  doseNumber: number;
  totalDoses: number;
  appointmentDate: string;
  appointmentTime: string;
  status: 'scheduled' | 'completed' | 'cancelled' | 'no-show';
  notes?: string;
  createdAt: string;
  staffId: string;
}

const StaffDashboard = () => {
  const [activeTab, setActiveTab] = useState('patients');
  const [patients, setPatients] = useState<Patient[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [showAppointmentForm, setShowAppointmentForm] = useState(false);
  const { toast } = useToast();

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
  const vaccineTypes: VaccineType[] = [
    {
      id: 'covid-19',
      name: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19',
      doses: 2,
      interval: 21,
      description: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19 ‡∏ï‡πâ‡∏≠‡∏á‡∏â‡∏µ‡∏î 2 ‡πÇ‡∏î‡∏™ ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 21 ‡∏ß‡∏±‡∏ô',
      available: true
    },
    {
      id: 'influenza',
      name: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà',
      doses: 1,
      interval: 0,
      description: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ ‡∏â‡∏µ‡∏î 1 ‡πÇ‡∏î‡∏™',
      available: true
    },
    {
      id: 'hepatitis-b',
      name: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏ï‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏ö‡∏µ',
      doses: 3,
      interval: 30,
      description: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏ï‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏ö‡∏µ ‡∏ï‡πâ‡∏≠‡∏á‡∏â‡∏µ‡∏î 3 ‡πÇ‡∏î‡∏™',
      available: true
    },
    {
      id: 'hpv',
      name: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô HPV',
      doses: 2,
      interval: 60,
      description: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏õ‡∏≤‡∏Å‡∏°‡∏î‡∏•‡∏π‡∏Å ‡∏â‡∏µ‡∏î 2 ‡πÇ‡∏î‡∏™ ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 60 ‡∏ß‡∏±‡∏ô',
      available: true
    }
  ];

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
  useEffect(() => {
    const mockPatients: Patient[] = [
      {
        id: '1',
        lineUserId: 'U1234567890',
        displayName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
        lastName: '‡πÉ‡∏à‡∏î‡∏µ',
        phone: '081-234-5678',
        registeredAt: '2024-01-15T10:30:00',
        status: 'pending'
      },
      {
        id: '2',
        lineUserId: 'U2345678901',
        displayName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ',
        firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
        lastName: '‡∏£‡∏±‡∏Å‡∏î‡∏µ',
        phone: '082-345-6789',
        registeredAt: '2024-01-16T14:20:00',
        status: 'pending'
      },
      {
        id: '3',
        lineUserId: 'U3456789012',
        displayName: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
        firstName: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢',
        lastName: '‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
        registeredAt: '2024-01-17T09:15:00',
        status: 'completed'
      }
    ];

    const mockAppointments: Appointment[] = [
      {
        id: 'apt-1',
        patientId: '3',
        patientName: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
        vaccineId: 'covid-19',
        vaccineName: '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19',
        doseNumber: 1,
        totalDoses: 2,
        appointmentDate: '2024-01-20',
        appointmentTime: '10:00',
        status: 'completed',
        notes: '‡∏â‡∏µ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
        createdAt: '2024-01-17T09:30:00',
        staffId: 'staff-001'
      }
    ];

    setPatients(mockPatients);
    setAppointments(mockAppointments);
  }, []);

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ï‡∏≤‡∏° search term
  const filteredPatients = patients.filter(patient =>
    patient.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    patient.phone?.includes(searchTerm)
  );

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
  const handleCreateAppointment = (formData: any) => {
    if (!selectedPatient) return;

    const newAppointment: Appointment = {
      id: `apt-${Date.now()}`,
      patientId: selectedPatient.id,
      patientName: selectedPatient.displayName,
      vaccineId: formData.vaccineId,
      vaccineName: vaccineTypes.find(v => v.id === formData.vaccineId)?.name || '',
      doseNumber: 1,
      totalDoses: vaccineTypes.find(v => v.id === formData.vaccineId)?.doses || 1,
      appointmentDate: formData.date,
      appointmentTime: formData.time,
      status: 'scheduled',
      notes: formData.notes,
      createdAt: new Date().toISOString(),
      staffId: 'staff-001'
    };

    setAppointments(prev => [...prev, newAppointment]);
    setShowAppointmentForm(false);
    setSelectedPatient(null);

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE
    sendLineNotification(selectedPatient, newAppointment);

    toast({
      title: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      description: `‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${selectedPatient.displayName} ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });
  };

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE
  const sendLineNotification = (patient: Patient, appointment: Appointment) => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ LINE Bot API
    console.log('Sending LINE notification:', {
      to: patient.lineUserId,
      message: `üéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß!

üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î:
üíâ ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô: ${appointment.vaccineName}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${appointment.appointmentDate}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${appointment.appointmentTime}
üè• ‡πÇ‡∏î‡∏™‡∏ó‡∏µ‡πà: ${appointment.doseNumber}/${appointment.totalDoses}

‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤
üìû ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏ó‡∏£: 02-xxx-xxxx`
    });

    toast({
      title: "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      description: `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏Ç‡∏≠‡∏á ${patient.displayName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground mb-2">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô - ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
          </h1>
          <p className="text-muted-foreground">
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
          </p>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4 max-w-2xl">
            <TabsTrigger value="patients" className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
            </TabsTrigger>
            <TabsTrigger value="appointments" className="flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            </TabsTrigger>
            <TabsTrigger value="vaccines" className="flex items-center gap-2">
              <Syringe className="h-4 w-4" />
              ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            </TabsTrigger>
          </TabsList>

          {/* ‡πÅ‡∏ó‡πá‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ */}
          <TabsContent value="patients" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
                </CardTitle>
                <CardDescription>
                  ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡πà‡∏≤‡∏ô LINE Bot ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                </CardDescription>
                <div className="flex items-center gap-4">
                  <div className="relative flex-1 max-w-md">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  {filteredPatients.map((patient) => (
                    <div key={patient.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                          <UserCheck className="h-6 w-6 text-primary" />
                        </div>
                        <div>
                          <h3 className="font-semibold">{patient.displayName}</h3>
                          <p className="text-sm text-muted-foreground">
                            {patient.phone || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'}
                          </p>
                          <p className="text-xs text-muted-foreground">
                            ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(patient.registeredAt).toLocaleString('th-TH')}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Badge variant={patient.status === 'completed' ? 'default' : 'secondary'}>
                          {patient.status === 'pending' ? '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' : 
                           patient.status === 'completed' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}
                        </Badge>
                        <Button
                          onClick={() => {
                            setSelectedPatient(patient);
                            setShowAppointmentForm(true);
                          }}
                          size="sm"
                          className="flex items-center gap-2"
                        >
                          <Plus className="h-4 w-4" />
                          ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ‡πÅ‡∏ó‡πá‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ */}
          <TabsContent value="appointments" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                </CardTitle>
                <CardDescription>
                  ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  {appointments.map((appointment) => (
                    <div key={appointment.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                          <Syringe className="h-6 w-6 text-primary" />
                        </div>
                        <div>
                          <h3 className="font-semibold">{appointment.patientName}</h3>
                          <p className="text-sm text-muted-foreground">
                            {appointment.vaccineName} - ‡πÇ‡∏î‡∏™‡∏ó‡∏µ‡πà {appointment.doseNumber}/{appointment.totalDoses}
                          </p>
                          <p className="text-xs text-muted-foreground">
                            üìÖ {appointment.appointmentDate} ‡πÄ‡∏ß‡∏•‡∏≤ {appointment.appointmentTime}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Badge variant={
                          appointment.status === 'completed' ? 'default' :
                          appointment.status === 'scheduled' ? 'secondary' :
                          appointment.status === 'cancelled' ? 'destructive' : 'outline'
                        }>
                          {appointment.status === 'scheduled' ? '‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß' :
                           appointment.status === 'completed' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' :
                           appointment.status === 'cancelled' ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : '‡πÑ‡∏°‡πà‡∏°‡∏≤'}
                        </Badge>
                        {appointment.status === 'scheduled' && (
                          <Button size="sm" variant="outline">
                            <Edit className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ‡πÅ‡∏ó‡πá‡∏ö‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô */}
          <TabsContent value="vaccines" className="mt-6">
            <div className="grid md:grid-cols-2 gap-6">
              {vaccineTypes.map((vaccine) => (
                <Card key={vaccine.id}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Syringe className="h-5 w-5" />
                      {vaccine.name}
                    </CardTitle>
                    <CardDescription>
                      {vaccine.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏î‡∏™:</span>
                        <span className="font-semibold">{vaccine.doses} ‡πÇ‡∏î‡∏™</span>
                      </div>
                      {vaccine.interval > 0 && (
                        <div className="flex justify-between">
                          <span className="text-sm text-muted-foreground">‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏™:</span>
                          <span className="font-semibold">{vaccine.interval} ‡∏ß‡∏±‡∏ô</span>
                        </div>
                      )}
                      <div className="flex justify-between">
                        <span className="text-sm text-muted-foreground">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                        <Badge variant={vaccine.available ? 'default' : 'secondary'}>
                          {vaccine.available ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' : '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}
                        </Badge>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* ‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
          <TabsContent value="notifications" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="h-5 w-5" />
                  ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                </CardTitle>
                <CardDescription>
                  ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Alert>
                  <Bell className="h-4 w-4" />
                  <AlertDescription>
                    ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î 1 ‡∏ß‡∏±‡∏ô
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô */}
        {showAppointmentForm && selectedPatient && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-md">
              <CardHeader>
                <CardTitle>‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selectedPatient.displayName}</CardTitle>
                <CardDescription>
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target as HTMLFormElement);
                  handleCreateAppointment({
                    vaccineId: formData.get('vaccine'),
                    date: formData.get('date'),
                    time: formData.get('time'),
                    notes: formData.get('notes')
                  });
                }} className="space-y-4">
                  <div>
                    <Label htmlFor="vaccine">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</Label>
                    <Select name="vaccine" required>
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô" />
                      </SelectTrigger>
                      <SelectContent>
                        {vaccineTypes.filter(v => v.available).map(vaccine => (
                          <SelectItem key={vaccine.id} value={vaccine.id}>
                            {vaccine.name} ({vaccine.doses} ‡πÇ‡∏î‡∏™)
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î</Label>
                    <Input
                      type="date"
                      name="date"
                      required
                      min={new Date().toISOString().split('T')[0]}
                    />
                  </div>

                  <div>
                    <Label htmlFor="time">‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î</Label>
                    <Input
                      type="time"
                      name="time"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="notes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</Label>
                    <Textarea
                      name="notes"
                      placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                      rows={3}
                    />
                  </div>

                  <div className="flex gap-3 pt-4">
                    <Button type="submit" className="flex-1">
                      <CheckCircle className="h-4 w-4 mr-2" />
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => {
                        setShowAppointmentForm(false);
                        setSelectedPatient(null);
                      }}
                    >
                      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default StaffDashboard;