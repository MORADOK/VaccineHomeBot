import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { 
  Smartphone, 
  MessageSquare, 
  QrCode, 
  CheckCircle, 
  UserPlus,
  ArrowRight,
  Copy,
  ExternalLink,
  Send,
  Link,
  Settings
} from 'lucide-react';

const PatientRegistration = () => {
  const [showQR, setShowQR] = useState(false);
  const [lineCode, setLineCode] = useState('');
  const n8nWebhookUrl = import.meta.env.VITE_WEBHOOK_URL;

const testPatientRegistration = () => {
  if (!n8nWebhookUrl) {
    toast({ title: "Webhook URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", variant: "destructive" });
    return;
  }
  // ...
};

  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const lineBot = {
    name: 'VaccineBot',
    id: '@vaccine-bot',
    qrCode: 'https://line.me/R/ti/p/@vaccine-bot',
    webhook: 'https://your-n8n.domain/webhook/line-bot'
  };

  const generateLineCode = () => {
    const webhookCode = `// LINE Bot Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
// URL: ${lineBot.webhook}

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
const welcomeMessage = {
  "type": "text",
  "text": "üè• ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô\\n\\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\\n\\n1Ô∏è‚É£ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏ï‡πá‡∏°)\\n2Ô∏è‚É£ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå\\n\\n‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
};

// ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
if (input.type === "message" && input.message.type === "text") {
  const userText = input.message.text.trim();
  const userId = input.source.userId;
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡∏à‡∏≤‡∏Å LINE
  const profileResponse = await this.helpers.request({
    method: "GET",
    url: "https://api.line.me/v2/bot/profile/" + userId,
    headers: {
      "Authorization": "Bearer " + process.env.LINE_CHANNEL_ACCESS_TOKEN
    }
  });
  
  const profile = profileResponse.body;
  
  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  const patterns = {
    fullName: /^[‡∏Å-‡πôa-zA-Z\\s]{4,50}$/,
    phone: /^(08|09|06|02)\\d{8}$/
  };
  
  let responseMessage = "";
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (patterns.fullName.test(userText)) {
    // ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    responseMessage = \`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠: \${userText}\\n\\nüì± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\\n(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678)\`;
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
    await saveToGoogleSheets('Patients', [
      userId,
      profile.displayName,
      userText, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
      '', // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ - ‡∏£‡∏≠‡∏Å‡∏£‡∏≠‡∏Å
      new Date().toISOString(),
      'pending-phone'
    ]);
    
  } else if (patterns.phone.test(userText.replace(/-/g, ''))) {
    // ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    responseMessage = \`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: \${userText}\\n\\nüéâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\\n\\nüë©‚Äç‚öïÔ∏è ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô\\n\\n‚è∞ ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\`;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets
    await updatePatientPhone(userId, userText);
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
    await notifyStaff(userId, profile.displayName, userText);
    
  } else {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    responseMessage = \`‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\\n\\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á:\\n\\n1Ô∏è‚É£ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)\\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ\\n\\n2Ô∏è‚É£ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (10 ‡∏´‡∏•‡∏±‡∏Å)\\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678\`;
  }
  
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  return [{
    json: {
      to: userId,
      messages: [{
        type: "text",
        text: responseMessage
      }]
    }
  }];
}

// Helper Functions
async function saveToGoogleSheets(sheetName, data) {
  const response = await this.helpers.request({
    method: 'POST',
    url: \`https://sheets.googleapis.com/v4/spreadsheets/\${process.env.GOOGLE_SPREADSHEET_ID}/values/\${sheetName}:append\`,
    headers: {
      'Authorization': 'Bearer ' + process.env.GOOGLE_ACCESS_TOKEN,
      'Content-Type': 'application/json'
    },
    body: {
      values: [data],
      valueInputOption: 'RAW'
    }
  });
  return response.body;
}

async function updatePatientPhone(userId, phone) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  const getResponse = await this.helpers.request({
    method: 'GET',
    url: \`https://sheets.googleapis.com/v4/spreadsheets/\${process.env.GOOGLE_SPREADSHEET_ID}/values/Patients:A:F\`,
    headers: {
      'Authorization': 'Bearer ' + process.env.GOOGLE_ACCESS_TOKEN
    }
  });
  
  const rows = getResponse.body.values || [];
  let updateRow = -1;
  
  for (let i = 0; i < rows.length; i++) {
    if (rows[i][0] === userId) {
      updateRow = i + 1;
      break;
    }
  }
  
  if (updateRow > 0) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await this.helpers.request({
      method: 'PUT',
      url: \`https://sheets.googleapis.com/v4/spreadsheets/\${process.env.GOOGLE_SPREADSHEET_ID}/values/Patients:D\${updateRow}:F\${updateRow}\`,
      headers: {
        'Authorization': 'Bearer ' + process.env.GOOGLE_ACCESS_TOKEN,
        'Content-Type': 'application/json'
      },
      body: {
        values: [[
          phone,
          new Date().toISOString(),
          'completed'
        ]],
        valueInputOption: 'RAW'
      }
    });
  }
}

async function notifyStaff(userId, displayName, phone) {
  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
  // (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Webhook, Email, ‡∏´‡∏£‡∏∑‡∏≠ Slack)
  console.log('New patient registered:', {
    userId,
    displayName,
    phone,
    timestamp: new Date().toISOString()
  });
}`;

    setLineCode(webhookCode);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
      description: "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    });
  };

  const sendToN8n = async (patientData: any) => {
    if (!n8nWebhookUrl) {
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å n8n Webhook URL ‡∏Å‡πà‡∏≠‡∏ô",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    
    try {
      const response = await fetch(n8nWebhookUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        // mode: "no-cors",
        body: JSON.stringify({
          ...patientData,
          timestamp: new Date().toISOString(),
          source: "frontend_registration",
        }),
      });

      toast({
        title: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á n8n workflow ‡πÅ‡∏•‡πâ‡∏ß",
      });
    } catch (error) {
      console.error("Error sending to n8n:", error);
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á n8n ‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
    const testData = {
      LineUserID: "test-user-123",
      displayName: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö",
      fullName: "‡∏ô‡∏≤‡∏¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö",
      phone: "081-234-5678",
      registrationType: "manual",
    };
    
    sendToN8n(testData);
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground mb-2">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE Bot
          </h1>
          <p className="text-muted-foreground">
            ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡πà‡∏≤‡∏ô LINE Bot
          </p>
        </div>

        <div className="grid gap-6">
          {/* n8n Integration */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Link className="h-5 w-5" />
                ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö n8n Workflow
              </CardTitle>
              <CardDescription>
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö n8n Webhook ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="n8n-webhook">n8n Webhook URL</Label>
                <div className="flex gap-2 mt-1">
                
                  <Button 
                    onClick={testPatientRegistration}
                    disabled={!n8nWebhookUrl || isLoading}
                  >
                    <Send className="h-4 w-4 mr-2" />
                    {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏ó‡∏î‡∏™‡∏≠‡∏ö'}
                  </Button>
                </div>
                <p className="text-xs text-muted-foreground mt-1">
                  URL ‡∏à‡∏≤‡∏Å n8n workflow ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ô Render
                </p>
              </div>
              
              <Alert>
                <Settings className="h-4 w-4" />
                <AlertDescription>
                  <strong>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö workflow ‡πÄ‡∏î‡∏¥‡∏°:</strong>
                  <br />‚Ä¢ ‡πÉ‡∏™‡πà Webhook URL ‡∏à‡∏≤‡∏Å n8n workflow ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                  <br />‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ó‡∏î‡∏™‡∏≠‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                  <br />‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á workflow ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Bot */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Bot
              </CardTitle>
              <CardDescription>
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</Label>
                  <div className="flex items-center gap-2 mt-1">
                    <Input value={lineBot.name} readOnly />
                    <Button size="sm" variant="outline" onClick={() => copyToClipboard(lineBot.name)}>
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <div>
                  <Label>LINE Bot ID</Label>
                  <div className="flex items-center gap-2 mt-1">
                    <Input value={lineBot.id} readOnly />
                    <Button size="sm" variant="outline" onClick={() => copyToClipboard(lineBot.id)}>
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
              
              <div>
                <Label>Webhook URL</Label>
                <div className="flex items-center gap-2 mt-1">
                  <Input value={lineBot.webhook} readOnly />
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(lineBot.webhook)}>
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              <div className="flex gap-3">
                <Button onClick={() => setShowQR(!showQR)}>
                  <QrCode className="h-4 w-4 mr-2" />
                  {showQR ? '‡∏ã‡πà‡∏≠‡∏ô QR Code' : '‡πÅ‡∏™‡∏î‡∏á QR Code'}
                </Button>
                <Button variant="outline" onClick={generateLineCode}>
                  <UserPlus className="h-4 w-4 mr-2" />
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î n8n
                </Button>
              </div>

              {showQR && (
                <div className="flex justify-center p-6 bg-muted rounded-lg">
                  <div className="text-center">
                    <div className="w-48 h-48 bg-white p-4 rounded-lg shadow-md mx-auto mb-4">
                      <div className="w-full h-full bg-gray-200 rounded flex items-center justify-center">
                        <QrCode className="h-20 w-20 text-gray-400" />
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô LINE Bot
                    </p>
                    <Button size="sm" variant="outline" className="mt-2">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Smartphone className="h-5 w-5" />
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
              </CardTitle>
              <CardDescription>
                ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ú‡πà‡∏≤‡∏ô LINE
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="flex items-start gap-4">
                  <div className="w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold">
                    1
                  </div>
                  <div>
                    <h3 className="font-semibold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô LINE Bot</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ID: {lineBot.id}
                    </p>
                  </div>
                </div>

                <ArrowRight className="h-5 w-5 text-muted-foreground ml-4" />

                <div className="flex items-start gap-4">
                  <div className="w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold">
                    2
                  </div>
                  <div>
                    <h3 className="font-semibold">‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏ï‡πá‡∏° (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
                    </p>
                    <Badge variant="outline" className="mt-1">
                      ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ
                    </Badge>
                  </div>
                </div>

                <ArrowRight className="h-5 w-5 text-muted-foreground ml-4" />

                <div className="flex items-start gap-4">
                  <div className="w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold">
                    3
                  </div>
                  <div>
                    <h3 className="font-semibold">‡∏™‡πà‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å
                    </p>
                    <Badge variant="outline" className="mt-1">
                      ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678
                    </Badge>
                  </div>
                </div>

                <ArrowRight className="h-5 w-5 text-muted-foreground ml-4" />

                <div className="flex items-start gap-4">
                  <div className="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center">
                    <CheckCircle className="h-5 w-5" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-green-600">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* ‡πÇ‡∏Ñ‡πâ‡∏î n8n */}
          {lineCode && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>‡πÇ‡∏Ñ‡πâ‡∏î n8n Webhook</span>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(lineCode)}>
                    <Copy className="h-4 w-4 mr-2" />
                    ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
                  </Button>
                </CardTitle>
                <CardDescription>
                  ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡πÉ‡∏ô Code Node ‡∏Ç‡∏≠‡∏á n8n ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
                </CardDescription>
              </CardHeader>
              <CardContent>
                <pre className="bg-muted p-4 rounded-lg text-sm overflow-x-auto">
                  <code>{lineCode}</code>
                </pre>
              </CardContent>
            </Card>
          )}
              {!n8nWebhookUrl && (
      <Alert>
        <AlertDescription>
          <span className="text-red-500 font-bold">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL!
          </span>
        </AlertDescription>
      </Alert>
    )}

          {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
          <Alert>
            <UserPlus className="h-4 w-4" />
            <AlertDescription>
              <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
              ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Staff Dashboard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            </AlertDescription>
          </Alert>
        </div>
      </div>
    </div>
  );
};

export default PatientRegistration;
