import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { AlertTriangle, CheckCircle, XCircle, Info, Settings, Database, Shield, Server } from 'lucide-react';

const TroubleshootingGuide = () => {
  const commonIssues = [
    {
      issue: "Package.json ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô n8n Render ‡πÑ‡∏î‡πâ",
      category: "deployment",
      severity: "high",
      symptoms: [
        "Build failed ‡∏ö‡∏ô Render",
        "n8n ‡πÑ‡∏°‡πà start",
        "Error: Cannot find module 'n8n'",
        "Version compatibility issues"
      ],
      solutions: [
        {
          step: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js Version",
          details: "‡πÉ‡∏ä‡πâ Node.js 18.10.0 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 20.x)",
          code: `"engines": {
  "node": ">=18.10.0",
  "npm": ">=9.0.0"
}`
        },
        {
          step: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç n8n Version",
          details: "‡πÉ‡∏ä‡πâ version 'latest' ‡πÅ‡∏ó‡∏ô version ‡πÄ‡∏â‡∏û‡∏≤‡∏∞",
          code: `"dependencies": {
  "n8n": "latest"
}`
        },
        {
          step: "‡πÄ‡∏û‡∏¥‡πà‡∏° Build Script ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          details: "Render ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ build script ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
          code: `"scripts": {
  "start": "n8n start",
  "build": "echo 'Build completed'",
  "postinstall": "echo 'Dependencies installed'"
}`
        }
      ]
    },
    {
      issue: "n8n ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ",
      category: "database",
      severity: "high",
      symptoms: [
        "Database connection error",
        "PostgreSQL connection failed",
        "Authentication failed for user"
      ],
      solutions: [
        {
          step: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables",
          details: "‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DB variables ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          code: `DB_TYPE=postgresdb
DB_POSTGRESDB_HOST=your-postgres-host
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=n8n_db
DB_POSTGRESDB_USER=n8n_user
DB_POSTGRESDB_PASSWORD=your-password`
        },
        {
          step: "‡πÉ‡∏ä‡πâ Connection String Format",
          details: "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ä‡πâ connection string ‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤",
          code: `DATABASE_URL=postgresql://user:password@host:5432/database`
        }
      ]
    },
    {
      issue: "Webhook ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
      category: "network",
      severity: "medium",
      symptoms: [
        "LINE Bot ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
        "Webhook timeout",
        "404 Not Found"
      ],
      solutions: [
        {
          step: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WEBHOOK_URL",
          details: "‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà Render ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ",
          code: `WEBHOOK_URL=https://your-app-name.onrender.com`
        },
        {
          step: "‡πÄ‡∏õ‡∏¥‡∏î n8n Webhook",
          details: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook endpoint ‡πÉ‡∏ô n8n",
          code: `https://your-app-name.onrender.com/webhook/line-bot`
        }
      ]
    },
    {
      issue: "Environment Variables ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô",
      category: "config",
      severity: "medium",
      symptoms: [
        "API keys ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
        "undefined environment variables",
        "Authentication errors"
      ],
      solutions: [
        {
          step: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Render Dashboard",
          details: "‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏ô code ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Environment section",
          code: `Settings ‚Üí Environment ‚Üí Add Environment Variable`
        },
        {
          step: "Redeploy ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ENV",
          details: "Render ‡∏ï‡πâ‡∏≠‡∏á redeploy ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô environment variables",
          code: `Manual Deploy ‚Üí Deploy Latest Commit`
        }
      ]
    }
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high": return "bg-red-100 text-red-800 border-red-200";
      case "medium": return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "low": return "bg-green-100 text-green-800 border-green-200";
      default: return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "deployment": return <Server className="h-5 w-5" />;
      case "database": return <Database className="h-5 w-5" />;
      case "network": return <Settings className="h-5 w-5" />;
      case "config": return <Shield className="h-5 w-5" />;
      default: return <Info className="h-5 w-5" />;
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-foreground mb-2">
          üîß ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ N8N ‡∏ö‡∏ô Render
        </h1>
        <p className="text-muted-foreground">
          ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ deploy N8N Vaccine Workflow
        </p>
      </div>

      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Render Logs ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Dashboard ‚Üí Service ‚Üí Logs 
          ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        </AlertDescription>
      </Alert>

      <div className="space-y-6">
        {commonIssues.map((item, index) => (
          <Card key={index} className="border-l-4 border-l-blue-500">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getCategoryIcon(item.category)}
                  <CardTitle className="text-lg">{item.issue}</CardTitle>
                </div>
                <Badge className={getSeverityColor(item.severity)}>
                  {item.severity.toUpperCase()}
                </Badge>
              </div>
            </CardHeader>
            
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-semibold text-red-600 mb-2 flex items-center gap-2">
                  <XCircle className="h-4 w-4" />
                  ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö:
                </h4>
                <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground ml-6">
                  {item.symptoms.map((symptom, idx) => (
                    <li key={idx}>{symptom}</li>
                  ))}
                </ul>
              </div>

              <Separator />

              <div>
                <h4 className="font-semibold text-green-600 mb-3 flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
                </h4>
                <div className="space-y-4">
                  {item.solutions.map((solution, idx) => (
                    <div key={idx} className="border rounded-lg p-4 bg-muted/50">
                      <h5 className="font-medium mb-2">
                        {idx + 1}. {solution.step}
                      </h5>
                      <p className="text-sm text-muted-foreground mb-3">
                        {solution.details}
                      </p>
                      {solution.code && (
                        <pre className="bg-background p-3 rounded border text-xs overflow-x-auto">
                          <code>{solution.code}</code>
                        </pre>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-700 flex items-center gap-2">
            <Info className="h-5 w-5" />
            ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold">1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Render Logs</h4>
              <p className="text-sm text-muted-foreground">
                Dashboard ‚Üí Service ‚Üí Logs ‚Üí ‡∏î‡∏π error messages ‡πÅ‡∏ö‡∏ö real-time
              </p>
            </div>
            <div>
              <h4 className="font-semibold">2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Environment Variables</h4>
              <p className="text-sm text-muted-foreground">
                ‡πÄ‡∏û‡∏¥‡πà‡∏° console.log ‡πÉ‡∏ô n8n workflow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á env variables
              </p>
            </div>
            <div>
              <h4 className="font-semibold">3. ‡πÉ‡∏ä‡πâ n8n Editor</h4>
              <p className="text-sm text-muted-foreground">
                ‡πÄ‡∏Ç‡πâ‡∏≤ https://your-app.onrender.com ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î n8n editor
              </p>
            </div>
            <div>
              <h4 className="font-semibold">4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook</h4>
              <p className="text-sm text-muted-foreground">
                ‡πÉ‡∏ä‡πâ Postman ‡∏´‡∏£‡∏∑‡∏≠ curl ‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook endpoint
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="bg-green-50 border-green-200">
        <CardHeader>
          <CardTitle className="text-green-700">‚úÖ Checklist ‡∏Å‡∏≤‡∏£ Deploy</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="font-semibold">Files ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:</h4>
              <ul className="space-y-1 text-sm">
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  Dockerfile
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  package.json (‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  render.yaml (optional)
                </li>
              </ul>
            </div>
            <div className="space-y-2">
              <h4 className="font-semibold">Environment Variables:</h4>
              <ul className="space-y-1 text-sm">
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  Database connection
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  LINE Bot credentials
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  Google API keys
                </li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TroubleshootingGuide;