import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { CalendarPlus, Search, Calendar, Syringe, RefreshCw, Send, Clock } from 'lucide-react';

interface NextAppointment {
  id: string;
  patient_id: string;
  patient_name: string;
  vaccine_name?: string;
  vaccine_type?: string;
  current_dose: number;
  total_doses: number;
  next_dose_due: string;
  last_dose_date: string | null;
  first_dose_date?: string | null;
  completion_status: string;
  line_user_id?: string;
  vaccine_schedule_id?: string;
  is_existing_appointment?: boolean;
}

const NextAppointments = () => {
  const [nextAppointments, setNextAppointments] = useState<NextAppointment[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [creatingAppointment, setCreatingAppointment] = useState<string | null>(null);
  const [sendingReminder, setSendingReminder] = useState<string | null>(null);
  const { toast } = useToast();

  const loadNextAppointments = async () => {
    setLoading(true);
    try {
      console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...');
      
      // Get all appointments (both completed and scheduled) to check for existing future appointments
      const { data: appointmentData, error: apptError } = await supabase
        .from('appointments')
        .select('*')
        .order('appointment_date', { ascending: false });

      if (apptError) throw apptError;

      console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', appointmentData?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

      const completedAppointments = appointmentData?.filter(a => a.status === 'completed') || [];
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      const scheduledAppointments = appointmentData?.filter(a => 
        ['scheduled', 'pending'].includes(a.status) && 
        new Date(a.appointment_date) >= new Date()
      ) || [];

      console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:', completedAppointments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      console.log('üìÖ ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', scheduledAppointments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

      // Group by patient and vaccine type to get latest doses and calculate actual dose counts
      const patientVaccineMap = new Map();
      
      for (const appt of completedAppointments || []) {
        const patientKey = appt.patient_id_number || appt.line_user_id;
        const key = `${patientKey}-${appt.vaccine_type}`;
        
        if (!patientVaccineMap.has(key)) {
          // Count completed doses for this patient and vaccine type
          const completedDoses = completedAppointments.filter(a => {
            const aPatientKey = a.patient_id_number || a.line_user_id;
            return (aPatientKey === patientKey) &&
                   a.vaccine_type === appt.vaccine_type &&
                   a.status === 'completed';
          });

          console.log(`üë§ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: ${appt.patient_name}, ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô: ${appt.vaccine_type}, ‡πÇ‡∏î‡∏™‡∏ó‡∏µ‡πà‡∏â‡∏µ‡∏î‡πÅ‡∏•‡πâ‡∏ß: ${completedDoses.length}`);

          // Find latest dose date
          const latestDose = completedDoses.reduce((latest, current) => 
            new Date(current.appointment_date) > new Date(latest.appointment_date) ? current : latest
          );

          // Find first dose date
          const firstDose = completedDoses.reduce((earliest, current) => 
            new Date(current.appointment_date) < new Date(earliest.appointment_date) ? current : earliest
          );

          console.log(`üìÖ ‡πÄ‡∏Ç‡πá‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${latestDose.appointment_date}, ‡πÄ‡∏Ç‡πá‡∏°‡πÅ‡∏£‡∏Å: ${firstDose.appointment_date}`);

          patientVaccineMap.set(key, {
            patient_id: patientKey,
            patient_name: appt.patient_name,
            line_user_id: appt.line_user_id,
            vaccine_type: appt.vaccine_type,
            doses_received: completedDoses.length,
            latest_date: latestDose.appointment_date,
            first_dose_date: firstDose.appointment_date
          });
        }
      }

      // Get vaccine schedules for calculating next doses
      const { data: vaccineSchedules } = await supabase
        .from('vaccine_schedules')
        .select('*')
        .eq('active', true);

      console.log('üíâ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô:', vaccineSchedules?.length || 0, '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó');

      // Initialize arrays for storing appointments
      const allNextAppointments: NextAppointment[] = [];

      // Calculate next appointments manually - include both new appointments and existing scheduled ones
      // 1. First add existing scheduled appointments that haven't passed and aren't cancelled
      for (const scheduledAppt of scheduledAppointments) {
        // Double check that appointment is still valid
        if (new Date(scheduledAppt.appointment_date) > new Date() && 
            ['scheduled', 'pending'].includes(scheduledAppt.status)) {
          const patientKey = scheduledAppt.patient_id_number || scheduledAppt.line_user_id;
          
          // Find completed doses for this patient and vaccine
          const completedDoses = completedAppointments.filter(a => {
            const aPatientKey = a.patient_id_number || a.line_user_id;
            return (aPatientKey === patientKey) &&
                   a.vaccine_type.toLowerCase() === scheduledAppt.vaccine_type.toLowerCase();
          });

          // Find vaccine schedule
          const schedule = vaccineSchedules?.find(vs => 
            vs.vaccine_type.toLowerCase() === scheduledAppt.vaccine_type.toLowerCase()
          );

          if (schedule) {
            allNextAppointments.push({
              id: `scheduled-${scheduledAppt.id}`,
              patient_id: patientKey,
              patient_name: scheduledAppt.patient_name,
              vaccine_name: scheduledAppt.vaccine_name || schedule.vaccine_name,
              vaccine_type: scheduledAppt.vaccine_type,
              current_dose: completedDoses.length,
              total_doses: schedule.total_doses,
              next_dose_due: scheduledAppt.appointment_date,
              last_dose_date: completedDoses.length > 0 ? 
                completedDoses.reduce((latest, current) => 
                  new Date(current.appointment_date) > new Date(latest.appointment_date) ? current : latest
                ).appointment_date : null,
              first_dose_date: completedDoses.length > 0 ?
                completedDoses.reduce((earliest, current) => 
                  new Date(current.appointment_date) < new Date(earliest.appointment_date) ? current : earliest
                ).appointment_date : null,
              completion_status: 'scheduled',
              line_user_id: scheduledAppt.line_user_id,
              vaccine_schedule_id: schedule.id,
              is_existing_appointment: true
            });
            
            console.log(`üìÖ ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${scheduledAppt.patient_name} - ${scheduledAppt.vaccine_type} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${scheduledAppt.appointment_date}`);
          }
        }
      }
      
      // 2. Then calculate new appointments needed for completed patients
      const nextAppointmentPromises = Array.from(patientVaccineMap.values()).map(async (patient) => {
        try {
          // Find vaccine schedule
          const schedule = vaccineSchedules?.find(vs => 
            vs.vaccine_type.toLowerCase() === patient.vaccine_type.toLowerCase()
          );

          if (!schedule) {
            console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô: ${patient.vaccine_type}`);
            return null;
          }

          // Check if patient needs next dose
          if (patient.doses_received >= schedule.total_doses) {
            console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${patient.patient_name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô ${patient.vaccine_type} ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
            return null; // Already completed
          }

          // Check if patient already has a future appointment for this vaccine type (and not cancelled)
          const existingFutureAppointment = scheduledAppointments.find(appt => {
            const apptPatientKey = appt.patient_id_number || appt.line_user_id;
            return (apptPatientKey === patient.patient_id) &&
                   appt.vaccine_type.toLowerCase() === patient.vaccine_type.toLowerCase() &&
                   new Date(appt.appointment_date) > new Date() &&
                   ['scheduled', 'pending'].includes(appt.status);
          });

          if (existingFutureAppointment) {
            console.log(`üìÖ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${patient.patient_name} ‡∏°‡∏µ‡∏ô‡∏±‡∏î ${patient.vaccine_type} ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${existingFutureAppointment.appointment_date} - ‡∏Ç‡πâ‡∏≤‡∏°`);
            return null; // Already has appointment (will be shown from existing appointments above)
          }

          // Calculate next dose date based on last completed dose
          const intervals = Array.isArray(schedule.dose_intervals) ? 
            schedule.dose_intervals : 
            JSON.parse(schedule.dose_intervals?.toString() || '[]');

          let nextDoseDate = new Date(patient.latest_date);
          
          // Add interval for next dose (intervals are 0-indexed from dose 1)
          const intervalIndex = patient.doses_received; // For dose N+1, use intervals[N]
          const intervalDays = typeof intervals[intervalIndex] === 'number' ? 
            intervals[intervalIndex] : 
            (typeof intervals[patient.doses_received - 1] === 'number' ? 
              intervals[patient.doses_received - 1] : 30);
          
          nextDoseDate.setDate(nextDoseDate.getDate() + intervalDays);

          const nextDoseNumber = patient.doses_received + 1;

          console.log(`üéØ ${patient.patient_name}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏™‡πÉ‡∏´‡∏°‡πà ${nextDoseNumber}/${schedule.total_doses}, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏±‡∏î: ${nextDoseDate.toISOString().split('T')[0]}, ‡∏ä‡πà‡∏ß‡∏á‡∏´‡πà‡∏≤‡∏á: ${intervalDays} ‡∏ß‡∏±‡∏ô`);

          return {
            id: `new-${patient.patient_id}-${patient.vaccine_type}`,
            patient_id: patient.patient_id,
            patient_name: patient.patient_name,
            vaccine_name: schedule.vaccine_name,
            vaccine_type: patient.vaccine_type,
            current_dose: patient.doses_received, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏î‡∏™‡∏ó‡∏µ‡πà‡∏â‡∏µ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏£‡∏¥‡∏á
            total_doses: schedule.total_doses,
            next_dose_due: nextDoseDate.toISOString().split('T')[0],
            last_dose_date: patient.latest_date, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á
            first_dose_date: patient.first_dose_date,
            completion_status: 'needs_appointment',
            line_user_id: patient.line_user_id,
            vaccine_schedule_id: schedule.id,
            is_existing_appointment: false
          };
        } catch (error) {
          console.error('Error processing patient:', patient.patient_id, error);
          return null;
        }
      });

      const results = await Promise.all(nextAppointmentPromises);
      const validNewAppointments = results
        .filter(appt => appt !== null);
      
      // 3. Combine existing and new appointments
      const allAppointments = [...allNextAppointments, ...validNewAppointments]
        .sort((a, b) => new Date(a.next_dose_due).getTime() - new Date(b.next_dose_due).getTime());
      
      console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:', allAppointments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      console.log('üìÖ ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', allNextAppointments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      console.log('üÜï ‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:', validNewAppointments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      
      allAppointments.forEach(appt => {
        const status = appt.is_existing_appointment ? '(‡∏°‡∏µ‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß)' : '(‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î)';
        console.log(`- ${appt.patient_name}: ‡πÇ‡∏î‡∏™ ${appt.current_dose + 1}/${appt.total_doses}, ‡∏ô‡∏±‡∏î: ${appt.next_dose_due}, ‡πÄ‡∏Ç‡πá‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${appt.last_dose_date || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ'} ${status}`);
      });
      
      setNextAppointments(allAppointments);
    } catch (error) {
      console.error('Error loading next appointments:', error);
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const scheduleAppointment = async (patientTracking: NextAppointment) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    try {
      const { data: existingAppointments } = await supabase
        .from('appointments')
        .select('*')
        .eq('patient_id_number', patientTracking.patient_id)
        .eq('vaccine_type', patientTracking.vaccine_type)
        .in('status', ['scheduled', 'pending'])
        .gte('appointment_date', new Date().toISOString().split('T')[0]);

      if (existingAppointments && existingAppointments.length > 0) {
        toast({
          title: "‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
          description: `${patientTracking.patient_name} ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß`,
          variant: "destructive",
        });
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        setNextAppointments(prevAppointments => 
          prevAppointments.filter(appt => appt.id !== patientTracking.id)
        );
        return;
      }
    } catch (error) {
      console.error('Error checking existing appointments:', error);
    }

    setCreatingAppointment(patientTracking.id);
    try {
      const appointmentData = {
        patient_id_number: patientTracking.patient_id,
        patient_name: patientTracking.patient_name,
        vaccine_type: patientTracking.vaccine_type,
        appointment_date: patientTracking.next_dose_due,
        status: 'scheduled',
        line_user_id: patientTracking.line_user_id,
        notes: `‡∏ô‡∏±‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏µ‡πà ${patientTracking.current_dose + 1} ‡∏à‡∏≤‡∏Å ${patientTracking.total_doses} ‡πÄ‡∏Ç‡πá‡∏°`
      };

      const { error } = await supabase
        .from('appointments')
        .insert([appointmentData]);

      if (error) throw error;

      // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
      setNextAppointments(prevAppointments => 
        prevAppointments.filter(appt => appt.id !== patientTracking.id)
      );

      toast({
        title: "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${patientTracking.patient_name} ‡πÅ‡∏•‡πâ‡∏ß`,
      });
    } catch (error) {
      console.error('Error scheduling appointment:', error);
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
        variant: "destructive",
      });
    } finally {
      setCreatingAppointment(null);
    }
  };

  const sendReminder = async (patientTracking: NextAppointment) => {
    if (!patientTracking.line_user_id) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢",
        variant: "destructive",
      });
      return;
    }

    setSendingReminder(patientTracking.id);
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Edge Function
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();

      if (sessionError || !session) {
        console.error('Authentication error:', sessionError);
        toast({
          title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ",
          description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
          variant: "destructive",
        });
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô healthcare staff ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data: isStaff, error: roleError } = await supabase.rpc('is_healthcare_staff', {
        _user_id: session.user.id
      });

      if (roleError) {
        console.error('Role check error:', roleError);
      }

      if (!isStaff) {
        toast({
          title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
          description: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå healthcare staff)",
          variant: "destructive",
        });
        return;
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Edge Function ‡∏û‡∏£‡πâ‡∏≠‡∏° authentication
      const { error } = await supabase.functions.invoke('send-line-message', {
        body: {
          userId: patientTracking.line_user_id,
          message: `üè• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì ${patientTracking.patient_name}\n‡∏ô‡∏±‡∏î‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏µ‡πà ${patientTracking.current_dose + 1} \n‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô: ${patientTracking.vaccine_name}\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î: ${new Date(patientTracking.next_dose_due).toLocaleDateString('th-TH')}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n\nüìç ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÇ‡∏Æ‡∏°`
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw error;
      }

      toast({
        title: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß",
        description: `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${patientTracking.patient_name} ‡πÅ‡∏•‡πâ‡∏ß`,
      });
    } catch (error: any) {
      console.error('Error sending reminder:', error);

      // ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ";

      if (error?.message) {
        if (error.message.includes('LINE')) {
          errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤";
        } else if (error.message.includes('authentication') || error.message.includes('auth')) {
          errorMessage = "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà";
        } else if (error.message.includes('Access denied') || error.message.includes('role')) {
          errorMessage = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ";
        } else {
          errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
        }
      }

      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setSendingReminder(null);
    }
  };

  useEffect(() => {
    loadNextAppointments();
    
    // Set up interval to refresh every 30 seconds
    const interval = setInterval(() => {
      loadNextAppointments();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const filteredAppointments = nextAppointments.filter(appt =>
    appt.patient_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    appt.vaccine_type.toLowerCase().includes(searchTerm.toLowerCase()) ||
    appt.patient_id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getDaysUntilDue = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = due.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const getDueBadge = (daysUntil: number) => {
    if (daysUntil < 0) {
      return <Badge className="bg-red-100 text-red-800 border-red-200">‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {Math.abs(daysUntil)} ‡∏ß‡∏±‡∏ô</Badge>;
    } else if (daysUntil === 0) {
      return <Badge className="bg-orange-100 text-orange-800 border-orange-200">‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Badge>;
    } else if (daysUntil <= 7) {
      return <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">‡∏≠‡∏µ‡∏Å {daysUntil} ‡∏ß‡∏±‡∏ô</Badge>;
    } else {
      return <Badge className="bg-green-100 text-green-800 border-green-200">‡∏≠‡∏µ‡∏Å {daysUntil} ‡∏ß‡∏±‡∏ô</Badge>;
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-lg">
            <CalendarPlus className="h-6 w-6 text-primary" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-foreground">‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</h1>
            <p className="text-sm text-muted-foreground">
              ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleTimeString('th-TH')})
            </p>
          </div>
        </div>
        <Button onClick={loadNextAppointments} disabled={loading} variant="outline">
          <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
          ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </Button>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </CardTitle>
            <Badge variant="secondary">
              ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {filteredAppointments.length} ‡∏Ñ‡∏ô
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="relative mb-6">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠ ID"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          <div className="space-y-4">
            {filteredAppointments.map((appointment) => {
              const daysUntil = getDaysUntilDue(appointment.next_dose_due);
              return (
                <div key={appointment.id} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="font-semibold text-lg">{appointment.patient_name}</h3>
                        {getDueBadge(daysUntil)}
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-muted-foreground mb-3">
                        <div className="flex items-center gap-2">
                          <Syringe className="h-4 w-4" />
                          {appointment.vaccine_name}
                        </div>
                        <div className="flex items-center gap-2">
                          <Calendar className="h-4 w-4" />
                          ‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏µ‡πà {appointment.current_dose + 1} ‡∏à‡∏≤‡∏Å {appointment.total_doses}
                        </div>
                        <div className="flex items-center gap-2">
                          <Clock className="h-4 w-4" />
                          ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {new Date(appointment.next_dose_due).toLocaleDateString('th-TH')}
                        </div>
                        <div className="flex items-center gap-2">
                          <span>üìÖ</span>
                          ‡πÄ‡∏Ç‡πá‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {appointment.last_dose_date ? 
                            new Date(appointment.last_dose_date).toLocaleDateString('th-TH') : 
                            '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                        </div>
                      </div>
                      <div className="text-xs text-muted-foreground bg-muted/50 p-2 rounded flex justify-between">
                        <span>ID: {appointment.patient_id}</span>
                        <span className="text-blue-600">
                          {appointment.is_existing_appointment ? '‚úì ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‚ö† ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î'}
                        </span>
                      </div>
                    </div>
                     <div className="flex gap-2 ml-4">
                       {!appointment.is_existing_appointment ? (
                         <Button
                           size="sm"
                           onClick={() => scheduleAppointment(appointment)}
                           disabled={creatingAppointment === appointment.id || creatingAppointment !== null}
                           className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                         >
                           {creatingAppointment === appointment.id ? (
                             <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                           ) : (
                             <CalendarPlus className="h-4 w-4 mr-1" />
                           )}
                           {creatingAppointment === appointment.id ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î'}
                         </Button>
                       ) : (
                         <Badge className="bg-green-100 text-green-800 border-green-200">
                           ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
                         </Badge>
                       )}
                       {appointment.line_user_id && (
                         <Button
                           size="sm"
                           variant="outline"
                           onClick={() => sendReminder(appointment)}
                           disabled={sendingReminder === appointment.id}
                           className="disabled:opacity-50"
                         >
                           {sendingReminder === appointment.id ? (
                             <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                           ) : (
                             <Send className="h-4 w-4 mr-1" />
                           )}
                           {sendingReminder === appointment.id ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'}
                         </Button>
                       )}
                     </div>
                  </div>
                </div>
              );
            })}
          </div>

          {filteredAppointments.length === 0 && (
            <div className="text-center py-12">
              <CalendarPlus className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">
                {searchTerm ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'}
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default NextAppointments;